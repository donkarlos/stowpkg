#! /bin/sh -e
#-----------------------------------------------------------------------------
#   stowpkg			- Build and manage self-deploying
#				  stowable packages
#
#   Copyright © 2020-2022 Das Computerlabor (DCl-M)
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License along
#   with this program; if not, write to the Free Software Foundation, Inc.,
#   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
##
##  AUTHOR(S):	ks	Karl Schmitz <ks@computerlabor.org>
##
##  WRITTEN BY:	ks	2020-05-03
##  CHANGED BY:	ks	2021-04-18	UTF-8ize copyright notice.
##		ks	2022-12-01	UTF-8ize ellipses.
##		ks	2022-12-02	Use UTF-8 bullets in list items.
##					Entirely silence initial »getopt -T«.
##					Prepend options from stow(1) resource
##					files to positional parameters.
##					Define cleanup tag with »safe_meta set
##					0tag« instead of obsolete safe_init().
##					Avoid to patch snip_{head,tail} read-
##					only declaration.
##					Prefer $dl_re_id to ancient $dl_re_id-
##					ent.
##					stowpkg_help(): Quote with UTF-8 dou-
##					ble angled quotes.
##		ks	2022-12-03	Invoke getopt(1) on behalf of stowpkg.
##					Implement option »--cpio«.
##					Implement option »-V|--version«.
##					stowpkg_{archive,extract}(): Cope with
##					»v« being unset.
##					Implement option »-g|--group=GROUP«.
##					Make target/stow dir. handling stow(1)-
##					compatible.
##----------------------------------------------------------------------------
##  Initialization:
#-----------------------------------------------------------------------------
LC_ALL=C; export LC_ALL			## Avoid locale insanities.
command=`basename "$0"`; readonly command
					## Determine command name.
unset GETOPT_COMPATIBLE POSIXLY_CORRECT GREP_OPTIONS GREP_COLOR GREP_COLORS
					## Make getopt(1) and the grep(1)s
					## behave.
#-vvvv--8><-vvvv-#
snip_head='#-vvvv--8><-vvvv-#'		## Define snip head and tail.
snip_tail='#-^^^^--8><-^^^^-#'
readonly snip_head snip_tail
#-^^^^--8><-^^^^-#
info_head='#-vvvv-INFO-vvvv-#'		## Define info and data section heads.
data_head='#-vvvv-DATA-vvvv-#'
readonly info_head data_head

unset TRACE verbose target compression group; stowdir=. archiver=cpio
compressor=xz encoder=base64 hostarch=`uname -s`.`uname -m`
arch=$hostarch; readonly hostarch	## Provide sane defaults.
stowpkg_0tag=:0; readonly stowpkg_0tag	## Preset cleanup tag.

#-vvvv--8><-vvvv-#
##----------------------------------------------------------------------------
##  stowpkg_atload(LIB)		Library load-time hook
##----------------------------------------------------------------------------
stowpkg_atload() {
    case $1 in				## Which library was just loaded?
	safe)				## »libsafe.sh«…
	    safe_meta set 0tag "$stowpkg_0tag"
	    ;;				## Define cleanup tag.
    esac
}

#-^^^^--8><-^^^^-#
##----------------------------------------------------------------------------
##  stowpkg_program(PROGRAM [&CATEGORY=program])
##				Ensure that PROGRAM (in CATEGORY) is present
##
##  Non-local variables:
##	• command	(R) Command name
##	• action	(R) Specified action
##	• &CATEGORY	(W) CATEGORY PROGRAM's absolute pathname
##----------------------------------------------------------------------------
stowpkg_program() {
    case ${1:+=} in			## PROGRAM passed?
	=)  local program="`command -v "$1"`" || {
					## Yes, is it present?
		echo "$command $action: Missing ${2-program} $1!" >&2
		return 1		## No, complain and indicate failure!
	    }
	    case ${2-program} in	## Is it supposed to be an archiver/
					## compressor/encoder?
		archiver|compressor|encoder)
		    eval "$2"'=$program'
		    ;;			## Yes, update corresponding variable.
	    esac
	    ;;
	*)  return 2			## No, indicate usage error!
	    ;;
    esac
}

##----------------------------------------------------------------------------
##  stowpkg_programs(PROGRAM …)	Ensure that all PROGRAMs are present
##----------------------------------------------------------------------------
stowpkg_programs() {
    local status=0 program; for program in ${1+"$@"}; do
	stowpkg_program "$program" || status=1
    done; return $status
}

##----------------------------------------------------------------------------
##  stowpkg_user_in_group(USER GROUP)
##				Ensure that USER is member of GROUP
##
##  Non-local variables:
##	• command	(R) Command name
##	• action	(R) Specified action
##----------------------------------------------------------------------------
stowpkg_user_in_group() {
    local groups; case ${2:+=}${3+3} in	## Usage OK?
	=)  groups=`(id "$1") 2>/dev/null | sed '
		s/^.* groups=/,/;s/,[[:digit:]]*(\([^()]*\))/,\1/g;s/^,//
	    '`; test -n "$groups" || {	## Yes, and USER exists?
		echo "$command $action: »${1:-(none)}«: No such user!" >&2
		return 1		## No, complain and indicate failure!
	    }; case ,$groups, in	## USER in GROUP?
		*,$2,*)			## Yes.
		    ;;
		*)  echo "$command $action: »${1:-(none)}«: user not in group »$2«!" >&2
		    return 1		## No, complain and indicate failure!
		    ;;
	    esac
	    ;;
	*)  return 2			## No, indicate abuse!
	    ;;
    esac
}

##----------------------------------------------------------------------------
##  stowpkg_decode([MODE])	Depending on MODE, either
##				• indicate that the elected encoder
##				  is supported for decoding or
##				• decode datastream from stdin to stdout
##
##  Non-local variables:
##	• command	(R) Command name
##	• action	(R) Specified action
##	• encoder	(W) Elected encoder's absolute pathname
##----------------------------------------------------------------------------
stowpkg_decode() {
    case ${encoder:=unknown}${1+:$1} in
	*/base64:supported)
	    return 0
	    ;;
	*:supported)
	    echo "$command $action: Encoder $encoder not supported!" >&2
	    return 1
	    ;;
	*/base64)
	    "$encoder" -d
	    ;;
	*)  cat
	    ;;
    esac
}

##----------------------------------------------------------------------------
##  stowpkg_inflate([MODE])	Depending on MODE, either
##				• indicate that the elected compressor
##				  is supported for inflation or
##				• inflate datastream from stdin to stdout
##
##  Non-local variables:
##	• command	(R) Command name
##	• action	(R) Specified action
##	• compressor	(W) Elected compressor's absolute pathname
##----------------------------------------------------------------------------
stowpkg_inflate() {
    case ${compressor:=unknown}${1+:$1} in
	*/lz[io]p:supported|*/xz:supported|*/lzma:supported|		\
	*/bzip2:supported|*/gzip:supported|*/compress:supported)
	    return 0
	    ;;
	*:supported)
	    echo "$command $action: Compressor $compressor not supported!" >&2
	    return 1
	    ;;
	*/lz[io]p|*/xz|*/lzma|*/bzip2|*/gzip|*/compress)
	    "$compressor" -dc
	    ;;
	*)  cat
	    ;;
    esac
}

##----------------------------------------------------------------------------
##  stowpkg_extract([MODE])	Depending on MODE, either
##				• indicate that the elected archiver
##				  is supported for extraction or
##				• extract datastream from stdin to
##				  stow directory
##
##  Non-local variables:
##	• command	(R) Command name
##	• action	(R) Specified action
##	• archiver	(W) Elected archiver's absolute pathname
##	• verbose	(R) Specifies if extraction should be verbose
##----------------------------------------------------------------------------
stowpkg_extract() {
    local v
    case ${verbose:-n} in
	y)  v=v	;;
    esac; case ${archiver:=unknown}${1+:$1} in
	*/cpio:supported|*/tar:supported)
	    return 0
	    ;;
	*:supported)
	    echo "$command $action: Archiver $archiver not supported!" >&2
	    return 1
	    ;;
	*/cpio:list)
	    "$archiver" -t${v-}
	    ;;
	*/cpio)
	    "$archiver" -i${v-}dmu --no-preserve-owner
	    ;;
	*/tar:list)
	    "$archiver" -t${v-}f -
	    ;;
	*/tar)
	    "$archiver" -x${v-}f - --no-same-owner
	    ;;
	*)  cat >/dev/null
	    ;;
    esac
}

##----------------------------------------------------------------------------
##  stowpkg_verify([STOWABLE=-]) Ensure that STOWABLE package is deployable
##
##  Non-local variables:
##	• command	(R) Command name
##	• action	(R) Specified action
##	• info_head	(R) INFO section head
##	• data_head	(R) DATA section head
##	• hostarch	(R) Architecture stowpkg(1) is invoked on
##	• arch		(W) Architecture STOWABLE was built for
##	• target	(W) Target directory STOWABLE was built for
##	• archiver	(W) Elected archiver's absolute pathname
##	• compressor	(W) Elected compressor's absolute pathname
##	• encoder	(W) Elected decoder's absolute pathname
##----------------------------------------------------------------------------
stowpkg_verify() {
    stowpkg_programs sed || return $?	## Bail out unless sed(1) is present.

    local status=0 info sq=${SQ-\'};	## Assume success.
    unset archiver compressor encoder arch target
					## Forget archiver/compressor/encoder/
					## arch/target presets.
    eval "`sed '
	1,/^'"$info_head"'$/d;/^'"$data_head"'$/,$d
	/^archiver=/bp
	/^compressor=/bp
	/^encoder=/bp
	/^arch=/bp
	/^target=/bp
	/^group=/bp
	d;:p
    ' "${1:--}"`" || {			## sed(1) succeeded in extracting the
					## INFO section?
	echo "$command $action: ${1:--}: No such stowable package!" >&2
	return 1			## No, complain and indicate failure!
    }

    for info in archiver compressor encoder arch target; do
	eval 'case ${'"$info"':+=} in	## Foreach required package info do…
	    =)		;;		## INFO section has it?
	    *)	status=1;;		## No, assume failure.
	esac'
    done; test $status -eq 0 || {	## All required infos extracted?
	echo "$command $action: ${1:--}: Not a stowable package!" >&2
	return 1			## No, complain and indicate failure!
    }

    case $suffix:$arch in		## STOWABLE suitable for ACTION?
	_info:*|_list:*|_revoke:*|*:$hostarch|*:all)
	    ;;
	*)  echo "$command $action: ${1:--}: Can${sq}t $action"		\
		 "stowable package built for $arch on $hostarch!" >&2
	    return 1			## No, complain and indicate failure!
	    ;;
    esac

    stowpkg_program "$archiver" archiver &&
	stowpkg_program "$compressor" compressor &&
	stowpkg_program "$encoder" encoder &&
	stowpkg_extract supported &&	## Ensure that elected archiver,
	stowpkg_inflate supported &&	## compressor, and encoder are present
	stowpkg_decode supported	## and supported.
}

##----------------------------------------------------------------------------
##  stowpkg_revocable([STOWABLE=-])
##				Ensure that STOWABLE package is revocable
##
##  Non-local variables:
##	• command	(R) Command name
##	• action	(R) Specified action
##	• arch		(R) Architecture STOWABLE was built for
##	• stowdir	(R) Stow directory STOWABLE had been deployed in
##	• target	(R) Target directory STOWABLE was built for
##----------------------------------------------------------------------------
stowpkg_revocable() {
    local sppn="${1:--}" spbn spsn ifs lpn rpn nl='
'
    spbn=${sppn##*/}; spsn=${spbn%_$arch.stow}
    ifs=$IFS; IFS=$nl; set shiftee `
	find "$target" -type l | sort -u
    `; shift; IFS=$ifs; for lpn in ${1+"$@"}; do
	rpn=`readlink -e "$lpn"` && case $rpn in
	    $stowdir/$spsn/*)
		echo "$command $action: $spsn is still installed!" >&2
		return 1
		;;
	esac
    done; return 0
}

#-vvvv--8><-vvvv-#
##----------------------------------------------------------------------------
##  stowpkg_archive([MODE])	Depending on MODE, either
##				• indicate that the elected archiver
##				  is supported or
##				• archive pathnames fed by stdin to stdout
##
##  Non-local variables:
##	• command	(R) Command name
##	• action	(R) Specified action
##	• archiver	(W) Elected archiver's absolute pathname
##	• verbose	(R) Specifies if archival should be verbose
##----------------------------------------------------------------------------
stowpkg_archive() {
    local v
    case ${verbose:-n} in
	y)  v=v	;;
    esac; case ${archiver:=unknown}${1+:$1} in
	*/cpio:supported|*/tar:supported)
	    return 0
	    ;;
	*:supported)
	    echo "$command $action: Archiver $archiver not supported!" >&2
	    return 1
	    ;;
	*/cpio)
	    cpio -o${v-}
	    ;;
	*/tar)
	    tar --no-recursion --verbatim-files-from -T - -c${v-}f -
	    ;;
	*)  cat >/dev/null		## Consume pathname list, leaving
	    ;;				## stdin at EOF.
    esac
}

##----------------------------------------------------------------------------
##  stowpkg_deflate([MODE])	Depending on MODE, either
##				• indicate that the elected compressor
##				  is supported or
##				• deflate datastream from stdin to stdout
##
##  Non-local variables:
##	• command	(R) Command name
##	• action	(R) Specified action
##	• compressor	(W) Elected compressor's absolute pathname
##	• compression	(R) Elected compression level
##----------------------------------------------------------------------------
stowpkg_deflate() {
    case ${compressor:=unknown}${1+:$1} in
	*/lz[io]p:supported|*/xz:supported|*/lzma:supported|		\
	*/bzip2:supported|*/gzip:supported|*/compress:supported)
	    return 0
	    ;;
	*:supported)
	    echo "$command $action: Compressor $compressor not supported!" >&2
	    return 1
	    ;;
	*/lz[io]p|*/xz|*/lzma|*/bzip2|*/gzip|*/compress)
	    "$compressor" -z${compression-}
	    ;;
	*)  cat
	    ;;
    esac
}

##----------------------------------------------------------------------------
##  stowpkg_encode([MODE])	Depending on MODE, either
##				• indicate that the elected encoder
##				  is supported or
##				• encode datastream from stdin to stdout
##
##  Non-local variables:
##	• command	(R) Command name
##	• action	(R) Specified action
##	• encoder	(W) Elected encoder's absolute pathname
##----------------------------------------------------------------------------
stowpkg_encode() {
    case ${encoder:=unknown}${1+:$1} in
	*/base64:supported)
	    return 0
	    ;;
	*:supported)
	    echo "$command $action: Encoder $encoder not supported!" >&2
	    return 1
	    ;;
	*/base64)
	    "$encoder"
	    ;;
	*)  cat
	    ;;
    esac
}

##----------------------------------------------------------------------------
##  stowpkg_getvars(MAKEFILE [&VARIABLE …])
##				Pick VARIABLE assignments from MAKEFILE and
##				convert them into POSIX shell syntax
##
##  Non-local variables:
##	• dl_re_id	(R) BRE matching an identifier
##	• dl_re_ident	(R) Ancient name for the above
##	• &VARIABLE	(W) Picked VARIABLE
##----------------------------------------------------------------------------
stowpkg_getvars() {
    local mfpn="$1" sx n; shift	## Fetch MAKEFILE's pathname.

    case ${1+=} in
	=)  sx='y/	/ /;s/   */ /g;s/^ //;s/ $//'
					## Have sed(1) compress whitespace.
	    for n in "$@"; do		## Foreach VARIABLE do…
		expr "_$n" : "_${dl_re_id-${dl_re_ident?}}$DS" >/dev/null &&
		    sx="$sx$NL"'/^\('"$n"'\) *= */bp'
	    done			## Append sed(1) statements to pick
					## VARIABLE unless it has an invalid
					## name.
	    sx="$sx$NL"'d;:p'"$NL"'s//\1=/;s/'"$SQ"'/&'"$BS$BS"'&&/g'
	    sx="$sx"';s/'"$SQ"'/&'"$BS$BS"'&&/g;s/=/&'"$SQ"'/;s/$/'"$SQ"'/'
					## Append sed(1) statements to con-
					## vert picked assignments into POSIX
					## shell syntax.
	    sed "$sx" "$mfpn" 2>/dev/null
	    ;;				## Do it!
    esac
}

##----------------------------------------------------------------------------
##  stowpkg_build([PACKAGE [VERSION]])
##				Build stowable package
##
##  Non-local variables:
##	• command	(R) Command name
##	• action	(R) Specified action
##	• snip_head	(R) Snip head
##	• snip_tail	(R) Snip tail
##	• info_head	(R) INFO section head
##	• data_head	(R) DATA section head
##	• hostarch	(R) Architecture stowpkg(1) is invoked on
##	• arch		(R) Architecture stowable should be built for
##	• target	(R) Target directory stowable package is built for
##	• archiver	(W) Elected archiver's absolute pathname
##	• compressor	(W) Elected compressor's absolute pathname
##	• encoder	(W) Elected encoder's absolute pathname
##	• group		(R) Deploy group
##----------------------------------------------------------------------------
stowpkg_build() {
    local t n v sx

    case $arch in
	$hostarch|all)
	    ;;
	*)  echo "$command $action: Don${SQ}t know how to build for $arch!" >&2
	    return 1
	    ;;
    esac

    stowpkg_programs mktemp sed make					&&
    stowpkg_program "$archiver" archiver				&&
    stowpkg_program "$compressor" compressor				&&
    stowpkg_program "$encoder" encoder					&&
    stowpkg_archive supported						&&
    stowpkg_deflate supported						&&
    stowpkg_encode supported || return $?
					## Ensure that requisite programs,
					## elected archiver, compressor, and
					## encoder are present and supported.

    test -f configure && test -x configure || {
	echo "$command $action: No configure script found!" >&2
	return 1			## Complain and abort unless configure
    }					## script exists.

    echo "$command $action: Prepare source…"
    local srcdir="`/bin/pwd`" tmpdir builddir destdir package version	\
	PACKAGE_TARNAME PACKAGE_VERSION PACKAGE VERSION spsn spbn

    dl_load safe && safe_mktmpdir tmpdir				&&
    safe_mktmpdir builddir _build && safe_mktmpdir destdir _dest	&&
    if test -f config.status; then
	mv config.status "$tmpdir"					&&
	undo_push "$stowpkg_0tag" 'mv -f' "$tmpdir"/config.status "$srcdir"
    else
	undo_push "$stowpkg_0tag" 'rm -f' "$srcdir"/config.status
    fi || {
	echo "$command $action: Couldn${SQ}t prepare source for building!" >&2
	return 1
    }

    echo "$command $action: Configure source…"
    (cd "$builddir" && "$srcdir"/configure --prefix="$target") || {
	echo "$command $action: Couldn${SQ}t configure source!" >&2
	return 1
    }

    case ${1:+1}${2:+2} in
	1*) package=$1 version=${2-}
	    ;;
	*)  eval "`
		stowpkg_getvars "$builddir"/Makefile			\
		    PACKAGE_TARNAME PACKAGE_VERSION PACKAGE VERSION
	    `"
	    package=${PACKAGE_TARNAME-${PACKAGE-`basename "$srcdir"`}}
	    version=${PACKAGE_VERSION-${VERSION-}}
	    ;;
    esac; spsn=$package${version:+_$version}; spbn=${spsn}_$arch.stow

    echo "$command $action: Build $spsn…"
    (cd "$builddir" && make) || {
	echo "$command $action: Couldn${SQ}t build $spsn!" >&2
	return 1
    }

    echo "$command $action: Install $spsn…"
    (cd "$builddir" && make DESTDIR="$destdir" prefix="/$spsn" install) || {
	echo "$command $action: Couldn${SQ}t install $spsn!" >&2
	return 1
    }; case ${group:+=} in
	=)  echo "$command $action: Make installation »$group«-deployable…"
	    case $- in *x*) t=t;; esac
	    if stowpkg_user_in_group "`whoami`" "$group"; then
		find "$destdir/$spsn" -type d -print0 |
		    xargs -0r${t-} chgrp "$group"			&&
		find "$destdir/$spsn" -type d -print0 |
		    xargs -0r${t-} chmod g+rwxs				&&
		find "$destdir/$spsn" -type l -print0 |
		    xargs -0r${t-} chgrp -h "$group"			&&
		find "$destdir/$spsn" ! -type d ! -type l -print0 |
		    xargs -0r${t-} chgrp "$group"			&&
		find "$destdir/$spsn" ! -type d ! -type l -perm -a+x -print0 |
		    xargs -0r${t-} chmod g+wx				&&
		find "$destdir/$spsn" ! -type d ! -type l ! -perm -a+x -print0 |
		    xargs -0r${t-} chmod g+w
	    else
		echo "$command $action: …skipped." >&2
	    fi
	    ;;
    esac

    echo "$command $action: Assemble $spbn…"
    undo_push 'rm -f' "$spbn"
    for n in encoder compressor compression archiver arch target group; do
					## For each info section variable do…
	eval 'case ${'"$n"':+=} in	## Variable is set and non-empty?
	    =)	case $n in		## Yes, which is it?
		    encoder|compressor|archiver)
					## Elected encoder/compressor/archiver…
			v=`quote_sh "${'"$n"'##*/}"`	;;
					## sh(1)-quote its basename.
		    arch|target|group)	## It must be sh(1)-quoted?
			v=`quote_sh "$'"$n"'"`		;;
					## Yes, do so.
		    *)	v=$'"$n"'			;;
					## No, supply it literally.
		esac; sx="${sx:+$sx$BS$NL}$n=$v"
		;;			## Augment sed(1) append statement.
	esac'
    done
    (cd "$destdir" && find "$spsn" | sort -u | stowpkg_archive) |
	stowpkg_deflate | stowpkg_encode | sed '
/Build and m/s//M/;/^'"$snip_head"'$/,/^'"$snip_tail"'$/d
/^'"$info_head"'$/a\
'"${sx:+$sx$BS$NL}$data_head$NL" "$0" - >$spbn				&&
    test -s "$spbn" && chmod +x${group:+,g+w} "$spbn"
}

#-^^^^--8><-^^^^-#
##----------------------------------------------------------------------------
##  stowpkg_info([STOWABLE=$0])	(Self-)show stowable package information
##
##  Non-local variables:
##	• info_head	(R) INFO section head
##	• data_head	(R) DATA section head
##----------------------------------------------------------------------------
stowpkg_info() {
    local sx='1,/^'"$info_head"'$/d;/^'"$data_head"'$/,$d'

    stowpkg_verify "${1:-$0}" && sed "$sx" "${1:-$0}"
					## Write INFO section to stdout.
}

##----------------------------------------------------------------------------
##  stowpkg_list([STOWABLE=$0])	(Self-)list stowable package contents
##
##  Non-local variables:
##	• data_head	(R) DATA section head
##----------------------------------------------------------------------------
stowpkg_list() {
    local sx='1,/^'"$data_head"'$/d'

    stowpkg_verify "${1:-$0}" && sed "$sx" "${1:-$0}" |
	stowpkg_decode | stowpkg_inflate | stowpkg_extract list
}

##----------------------------------------------------------------------------
##  stowpkg_deploy([STOWABLE=$0])
##				(Self-)deploy STOWABLE into stow directory
##
##  Non-local variables:
##	• command	(R) Command name
##	• action	(R) Specified action
##	• stowdir	(R) Stow directory STOWABLE will be deployed to
##	• data_head	(R) DATA section head
##----------------------------------------------------------------------------
stowpkg_deploy() {
    local sx='1,/^'"$data_head"'$/d'

    test -n "${stowdir-}" || {
	echo "$command $action: No stow directory given!" >&2
	return 1
    }
    test -d "$stowdir" || {
	echo "$command $action: $stowdir: No such directory!" >&2
	return 1
    }

    stowpkg_verify "${1:-$0}" && sed "$sx" "${1:-$0}" |
	stowpkg_decode | stowpkg_inflate | (cd "$stowdir" && stowpkg_extract)
}

##----------------------------------------------------------------------------
##  stowpkg_revoke([STOWABLE=$0])
##				(Self-)revoke STOWABLE from stow directory
##
##  Non-local variables:
##	• command	(R) Command name
##	• action	(R) Specified action
##	• stowdir	(R) Stow directory STOWABLE had been deployed in
##	• verbose	(R) Be verbose?
##	• data_head	(R) DATA section head
##----------------------------------------------------------------------------
stowpkg_revoke() {
    local sx='1,/^'"$data_head"'$/d' ifs rn pn ECHO ds='$' nl='
'

    test -n "${stowdir-}" || {
	echo "$command $action: No stow directory given!" >&2
	return 1
    }
    test -d "$stowdir" || {
	echo "$command $action: $stowdir: No such directory!" >&2
	return 1
    }

    stowpkg_verify "${1:-$0}" && stowpkg_revocable "${1:-$0}" || return 1
					## Give up unless STOWABLE passes ver-
					## ification and revocability check.
    case ${verbose-n} in
	y)  ECHO=echo	;;
	*)  ECHO=:	;;
    esac

    ifs=$IFS; ifs=$nl; set shiftee `
	sed "$sx" "${1:-$0}" | stowpkg_decode | stowpkg_inflate |
	    verbose=n stowpkg_extract list 2>/dev/null | sort -ru
    `; shift; IFS=$ifs; for rn in ${1+"$@"}; do
					## Foreach stow directory-relative
					## pathname in STOWABLE do…
	pn=$stowdir/$rn			## Derive absolute pathname and try to
	if test -h "$pn"; then		## remove it.
	    $ECHO "$ds rm -f $pn"; rm -f "$pn"
	elif test -d "$pn"; then
	    $ECHO "$ds rmdir $pn"; rmdir "$pn"
	elif test -e "$pn"; then
	    $ECHO "$ds rm -f $pn"; rm -f "$pn"
	fi
    done || :
}

##----------------------------------------------------------------------------
##  stowpkg_help([ACTION])	Show help (for ACTION)
##
##  Non-local variables:
##	• suffixes	(R) »:«-separated list of action suffixes
##	• command	(R) Command name
##	• hostarch	(R) Host architecture
##	• target	(R) Default target directory
##	• archiver	(R) Default archiver
##	• compressor	(R) Default compressor
##	• encoder	(R) Default encoder
##----------------------------------------------------------------------------
stowpkg_help() {
    local suffix=`echo "${1+_$*}" | sed 'y/ /_/'`

    case :$suffixes: in
	*:${suffix}:*)	;;
	*)  suffix=	;;
    esac; case $suffix in
	_help)		cat <<EOF
Usage: $command $* [ACTION]
	Show help (for ACTION).
EOF
	    ;;
#-vvvv--8><-vvvv-#
	_version)	cat <<EOF
Usage: $command $*
	Show version and license information.
EOF
	    ;;
	_build)		cat <<EOF
Usage: $command [OPTION …] $* [PACKAGE [VERSION]]
	Build stowable package.

Valid options are:
 -v, --verbose		Be verbose
 -a, --arch=ARCH	Build for ARCHitecture (»$hostarch«)
 -d, --dir, --stow-dir=STOWDIR
			Build for deployment in STOW DIRectory (»$stowdir«)
 -t, --target=TARGET	Build for deployment in TARGET directory (»${target:-(unset)}«)
     --cpio		Build archive with cpio(1)
     --tar		Build archive with tar(1)
 -A, --use-archiver, --use-archive-program=ARCHIVER
			Build archive with ARCHIVER (»$archiver«)
     --lzip		Compress with lzip(1)
     --lzop		Compress with lzop(1)
 -J, --xz		Compress with xz(1)
     --lzma		Compress with lzma(1)
 -j, --bzip2		Compress with bzip2(1)
 -z, --gzip		Compress with gzip(1)
 -Z, --compress		Compress with compress(1)
 -I, --use-compressor, --use-compress-program=COMPRESSOR
			(Un-)Compress with COMPRESSOR (»$compressor«)
 -#, --fast, --best	Specify compression level (${compression+»-$compression«, }# is a digit!)
 -E, --use-encoder, --use-encode-program=ENCODER
			Encode with ENCODER (»$encoder«)
 -g, --group=GROUP	Make stowable package deployable by GROUP member
EOF
	    ;;
#-^^^^--8><-^^^^-#
	_info)		cat <<EOF
Usage: $command $* [STOWABLE]
	(Self-)show stowable package information.
EOF
	    ;;
	_list)		cat <<EOF
Usage: $command [OPTION …] $* [STOWABLE]
	(Self-)list stowable package contents.

Valid options are:
 -v, --verbose		Show detailed listing
EOF
	    ;;
	_deploy)	cat <<EOF
Usage: $command [OPTION …] $* [STOWABLE]
	(Self-)deploy stowable package into stow directory.

Valid options are:
 -d, --dir, --stow-dir=STOWDIR
			Use STOW DIRectory
 -v, --verbose		Be verbose
EOF
	    ;;
	_revoke)	cat <<EOF
Usage: $command [OPTION …] $* [STOWABLE]
	(Self-)revoke stowable package from stow directory.

Valid options are:
 -d, --dir, --stow-dir=STOWDIR
			Use STOW DIRectory
 -v, --verbose		Be verbose
EOF
	    ;;
	*)		cat <<EOF
Usage: $command [OPTION …] ACTION [ARGUMENT …]

Possible actions are:`echo ":-:$suffixes" | sed 's/:-:/\n  •/g;y/_:/ ,/'`
Try »$command help ACTION« for details.

Valid OPTIONs are:
 -h, --help		Show usage information
 -V, --version		Show version and copyright information

EOF
	    return
	    ;;
    esac
}

#-vvvv--8><-vvvv-#
##----------------------------------------------------------------------------
##  stowpkg_version()		Show version and license information
##
##  Non-local variables:
##	• command	(R) Command name
##----------------------------------------------------------------------------
stowpkg_version() {
    cat <<EOF
$command (@PACKAGE_NAME@) @PACKAGE_VERSION@
Copyright © 2020-2022 Das Computerlabor (DCl-M)
License GPLv2: GNU GPL version 2 or later
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Please send bug reports to <@PACKAGE_BUGREPORT@>.
EOF
}

#-^^^^--8><-^^^^-#
##----------------------------------------------------------------------------
##  Main program:
##----------------------------------------------------------------------------
(getopt -T) >/dev/null 2>&1 && {
    echo "$command: Legacy getopt(1) found!" >&2; exit 1
} || case $? in
    4)	optstring=hVvA:JjzZI:123456789E:a:d:t:g:
	longopts=trace,help,version,verbose,use-archiver:,use-archive-program:
	longopts=$longopts,cpio,tar,lzip,lzop,xz,lzma,bzip2,gzip,compress
	longopts=$longopts,use-compressor:,use-compress-program:
	longopts=$longopts,fast,best,use-encoder:,use-encode-program:
	longopts=$longopts,arch:,dir:,stow-dir:,target:,group:
	;;
    *)	echo "$command: Missing getopt(1)!" >&2
	exit 1
	;;
esac
eval set shiftee `
    sed 'y/	/ /;s/   */ /g;s/^ //;s/ $//;/^$/d;/^#/d;s/ #.*$//'	\
	.stowrc "$HOME"/.stowrc 2>/dev/null || :
` ${1+"$@"}; shift			## Prepend options from stow(1) re-
					## source files to pos. paramaters.
args=`getopt -n"$command" -o"$optstring" -l"$longopts" -- ${1+"$@"}` || {
    stowpkg_help >&2; exit 2
}
eval set shiftee "$args"; unset optstring longopts args
while shift; do				## Process parsed options…
    case $1 in
	--trace)	TRACE='set -x'		;;
	-h|--help)	stowpkg_help;	 exit 0	;;
	-V|--version)	stowpkg_version; exit 0	;;
	-v|--verbose)	verbose=y		;;
	   --cpio|--tar)
			archiver=${1#--}	;;
	-A|--use-archiver|--use-archive-program)
			shift; archiver=$1	;;
	   --lz[io]p|--xz|--lzma|--bzip2|--gzip|--compress)
			compressor=${1#--}	;;
	-J)		compressor=xz		;;
	-j)		compressor=bzip2	;;
	-z)		compressor=gzip		;;
	-Z)		compressor=compress	;;
	-I|--use-compressor|--use-compress-program)
			shift; compressor=$1	;;
	-1|--fast)	compression=1		;;
	-[2345678])	compression=${1#-}	;;
	-9|--best)	compression=9		;;
	-E|--use-encoder|--use-encode-program)
			shift; encoder=$1	;;
	-a|--arch)	shift; arch=$1		;;
	-d|--dir|--stow-dir)
			shift; stowdir=$1 target=`dirname "$1"`	;;
	-t|--target)	shift; target=$1	;;
	-g|--group)	shift; group=$1		;;
	--)		shift; break		;;
    esac
done
${TRACE+$TRACE}
case $#:$command in
    0:?*.stow)
	exec "$0" deploy
	;;
    *:?*.stow)
	suffixes=_help:_info:_list:_deploy:_revoke
	;;
#-vvvv--8><-vvvv-#
    *)
	eval "`libdl-sh load`" && dl_atload stowpkg_atload
	suffixes=_help:_version:_build:_info:_list:_deploy:_revoke
	;;
#-^^^^--8><-^^^^-#
esac; case ${suffixes:+=} in
    =)	;;
    *)	echo "$command: Ran out of actions!" >&2
	exit 2
esac; suffix=; while test $# -gt 0; do	## Extend suffix…
    suffix=${suffix}_$1; shift
    case :$suffixes: in
	*:${suffix}_*)	;;
	*)  break	;;
    esac
done

case :$suffixes: in			## Extended suffix recognized?
    *:${suffix}:*)			## Yes, derive…
	action=`echo "$suffix" | sed 's/^_//;y/_/ /'`
	stowpkg$suffix ${1+"$@"}	## …and perform action
	;;
    *)	stowpkg_help >&2; exit 2	## No, show general help and
	;;				## indicate usage error.
esac; exit $?
#-vvvv-INFO-vvvv-#
